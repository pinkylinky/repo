package com.tm.jdbc.dbtype;

import java.util.HashMap;
import java.util.Map;

public class DerbyDescriptor extends DBDescriptor {

	@Override
	public String getConnectionString(String host, String port, String dbName,
			String username, String password) {

		return String.format("jdbc:derby:data/%s;create=true", dbName);
	}

	@Override
	public String getDriverClass() {
		return "org.apache.derby.jdbc.EmbeddedDriver";
	}

	@Override
	public String getCreateTableSQLCommand(TableDescriptor table) {
		StringBuilder sb = new StringBuilder();
		sb.append("CREATE TABLE ").append(table.getName()).append(" (");
		for (ColumnDescriptor column : table.getColumns()) {
			sb.append(column.getName()).append(" ");
			sb.append(getDataType(column.getDataType()));
			if (column.isRequired())
				sb.append(" NOT NULL");
			if (column.isAutogenerated())
				sb.append(" GENERATED ALWAYS AS IDENTITY");
			sb.append(", ");
		}
		sb.delete(sb.length() - 2, sb.length());
		sb.append(" )");
		return sb.toString();
	}

	@Override
	public String getDataType(DataType datatype) {
		String derbyDataType = dataTypeMap.get(datatype);
		if (derbyDataType == null)
			throw new RuntimeException("Не найден тип данных " + datatype);
		return derbyDataType;
	}
	
	private static Map<DataType, String> dataTypeMap = new HashMap<DataType, String>();
	
	static {
		dataTypeMap.put(DataType.STRING, "VARCHAR(30)");
		dataTypeMap.put(DataType.INTEGER, "INTEGER");
		dataTypeMap.put(DataType.LONG, "INT");
		dataTypeMap.put(DataType.FLOAT, "DECIMAL");
		dataTypeMap.put(DataType.BOOLEAN, "SMALLINT");
		dataTypeMap.put(DataType.DATE, "DATE");
		dataTypeMap.put(DataType.TIME, "TIME");
		dataTypeMap.put(DataType.TIMESTAMP, "TIMESTAMP");
	}

	@Override
	public String getAddColumnSQLCommand(String tableName,
			ColumnDescriptor column) {
		
		StringBuilder sb =  new StringBuilder();
		sb.append("ALTER TABLE ").append(tableName);
		sb.append(" ADD COLUMN ");
		sb.append(column.getName()).append(" ");
		sb.append(getDataType(column.getDataType()));
		if (column.isRequired())
			sb.append(" NOT NULL");
		if (column.isAutogenerated())
			sb.append(" GENERATED ALWAYS AS IDENTITY");
		return sb.toString();
	}

	@Override
	public String getDropColumnSQLCommand(String tableName, String columnName) {
		StringBuilder sb =  new StringBuilder();
		sb.append("ALTER TABLE ").append(tableName);
		sb.append(" DROP COLUMN ").append(columnName);
		return sb.toString();
	}

}

